/* Gallery Layout for Photos and Videos Pages */

/* Main Content Styling */
section {
    max-width: 1200px;
    margin: 30px auto;
    padding: 0 5%;
    background: rgba(0, 0, 0, 0.6);
    backdrop-filter: blur(10px);
    border-radius: 15px;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
}

/* Media Elements Styling */
img, video {
    max-width: 100%;
    height: auto;
    display: block;
    margin: 30px auto;
    border-radius: 10px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}

/* Hover Effects */
img:hover, video:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
}

/* Video Specific Styling */
video {
    width: 80%;
    max-height: 70vh;
    background: #000;
}

/* Text Content Styling */
p, article, h5 {
    color: #fff;
    line-height: 1.7;
    margin: 25px 0;
    text-align: center;
    padding: 0 10%;
    font-size: 1.05em;
}

article {
    font-style: italic;
    font-size: 1.1em;
    color: #ffd166;
    padding: 20px 15%;
    line-height: 1.8;
}

h5 {
    color: #ff6b6b;
    font-size: 1.1em;
    margin: 20px auto;
    padding: 15px;
    background: rgba(255, 107, 107, 0.1);
    border-radius: 10px;
    max-width: 800px;
}

/* Responsive Adjustments */
@media (max-width: 768px) {
    section {
        padding: 0 15px;
        margin: 20px 10px;
    }
    
    img, video {
        width: 100%;
        margin: 20px auto;
    }
    
    p, article, h5 {
        padding: 0 5px;
        font-size: 1em;
    }
    
    article {
        padding: 15px 10px;
        font-size: 1em;
    }
}

/* Smooth Loading */
img, video {
    opacity: 1;
    transform: translateY(0);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
}

/* Add this JavaScript to your HTML files:
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const mediaElements = document.querySelectorAll('img, video');
        
        const lazyLoad = (entries, observer) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    const media = entry.target;
                    if (media.tagName === 'IMG' && !media.src) {
                        media.src = media.dataset.src;
                    }
                    media.classList.add('loaded');
                    observer.unobserve(media);
                }
            });
        };

        const observer = new IntersectionObserver(lazyLoad, {
            root: null,
            threshold: 0.1,
            rootMargin: '0px 0px 50px 0px'
        });

        mediaElements.forEach(media => {
            if (media.tagName === 'IMG' && !media.src) {
                media.dataset.src = media.getAttribute('src');
                media.removeAttribute('src');
            }
            observer.observe(media);
        });
    });
</script>
*/
